package kg.santechmarket.service.impl;

import kg.santechmarket.dto.NotificationResponseDTO;
import kg.santechmarket.entity.Notification;
import kg.santechmarket.entity.Order;
import kg.santechmarket.entity.User;
import kg.santechmarket.enums.NotificationType;
import kg.santechmarket.enums.OrderStatus;
import kg.santechmarket.repository.NotificationRepository;
import kg.santechmarket.service.NotificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 * <p>
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository notificationRepository;

    /**
     * –ù–∞–π—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
     */
    public Optional<Notification> findById(Long id) {
        return notificationRepository.findById(id);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public Page<Notification> getUserNotifications(Long userId, Pageable pageable) {
        return notificationRepository.findByUserIdOrderByCreatedAtDesc(userId, pageable);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<Notification> getUnreadNotifications(Long userId) {
        return notificationRepository.findByUserIdAndIsReadFalseOrderByCreatedAtDesc(userId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public long getUnreadNotificationCount(Long userId) {
        return notificationRepository.countByUserIdAndIsReadFalse(userId);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    @Transactional
    public Notification createNotification(Long userId, NotificationType type,
                                           String title, String content, String metadata) {
        log.debug("–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, title);

        Notification notification = new Notification();

        User user = new User();
        user.setId(userId);
        notification.setUser(user);

        notification.setType(type);
        notification.setTitle(title);
        notification.setContent(content);
        notification.setMetadata(metadata);

        Notification savedNotification = notificationRepository.save(notification);
        log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", title, userId);

        return savedNotification;
    }

    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
     */
    @Transactional
    public void markAsRead(Long notificationId, Long userId) {
        log.debug("–û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", notificationId, userId);

        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new IllegalArgumentException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: " + notificationId));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!notification.getUser().getId().equals(userId)) {
            throw new IllegalArgumentException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }

        if (!notification.getIsRead()) {
            notification.markAsRead();
            notificationRepository.save(notification);
            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", notificationId);
        }
    }

    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     */
    @Transactional
    public void markAllAsRead(Long userId) {
        log.info("–û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);

        List<Notification> unreadNotifications = notificationRepository.findByUserIdAndIsReadFalse(userId);

        for (Notification notification : unreadNotifications) {
            notification.markAsRead();
        }

        if (!unreadNotifications.isEmpty()) {
            notificationRepository.saveAll(unreadNotifications);
            log.info("–û—Ç–º–µ—á–µ–Ω–æ {} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    unreadNotifications.size(), userId);
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    @Transactional
    public void deleteNotification(Long notificationId, Long userId) {
        log.info("–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", notificationId, userId);

        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new IllegalArgumentException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: " + notificationId));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!notification.getUser().getId().equals(userId)) {
            throw new IllegalArgumentException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }

        notificationRepository.delete(notification);
        log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {} —É–¥–∞–ª–µ–Ω–æ", notificationId);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
     */
    @Transactional
    public void sendOrderCreatedNotification(Order order) {
        String title = "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω";
        String content = String.format(
                "–í–∞—à –∑–∞–∫–∞–∑ %s —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω–∞ —Å—É–º–º—É %.2f —Å. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                order.getOrderNumber(), order.getTotalAmount()
        );
        String metadata = String.format("{\"order_id\": %d, \"order_number\": \"%s\"}",
                order.getId(), order.getOrderNumber());

        createNotification(order.getUser().getId(), NotificationType.ORDER_UPDATE, title, content, metadata);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
     */
    @Transactional
    public void sendOrderStatusUpdateNotification(Order order, OrderStatus oldStatus) {
        String title = "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω";
        String content = getStatusUpdateMessage(order.getOrderNumber(), order.getStatus());
        String metadata = String.format(
                "{\"order_id\": %d, \"order_number\": \"%s\", \"old_status\": \"%s\", \"new_status\": \"%s\"}",
                order.getId(), order.getOrderNumber(), oldStatus, order.getStatus()
        );

        createNotification(order.getUser().getId(), NotificationType.ORDER_UPDATE, title, content, metadata);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
     */
    @Transactional
    public void sendOrderCancelledNotification(Order order, String reason) {
        String title = "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω";
        String content = String.format(
                "–í–∞—à –∑–∞–∫–∞–∑ %s –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. %s",
                order.getOrderNumber(),
                reason != null ? "–ü—Ä–∏—á–∏–Ω–∞: " + reason : "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
        );
        String metadata = String.format(
                "{\"order_id\": %d, \"order_number\": \"%s\", \"cancel_reason\": \"%s\"}",
                order.getId(), order.getOrderNumber(), reason != null ? reason : ""
        );

        createNotification(order.getUser().getId(), NotificationType.ORDER_UPDATE, title, content, metadata);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     */
    @Transactional
    public void sendBroadcastNotification(NotificationType type, String title, String content,
                                          List<Long> userIds, String metadata) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{}' –¥–ª—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", title, userIds.size());

        for (Long userId : userIds) {
            createNotification(userId, type, title, content, metadata);
        }

        log.info("–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", userIds.size());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∏–¥–∫–µ
     */
    @Transactional
    public void sendDiscountNotification(List<Long> userIds, String promotionTitle,
                                         String promotionDescription, Integer discountPercent) {
        String title = "–°–∫–∏–¥–∫–∏!";
        String content = String.format("üéâ %s\n\n%s", promotionTitle, promotionDescription);
        String metadata = String.format(
                "{\"promotion_title\": \"%s\", \"discount_percent\": %d}",
                promotionTitle, discountPercent != null ? discountPercent : 0
        );

        sendBroadcastNotification(NotificationType.DISCOUNT, title, content, userIds, metadata);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π)
     */
    @Transactional
    public void cleanupOldNotifications(int daysThreshold) {
        log.info("–û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç–∞—Ä—à–µ {} –¥–Ω–µ–π", daysThreshold);

        int deletedCount = notificationRepository.deleteOldNotifications(daysThreshold);

        if (deletedCount > 0) {
            log.info("–£–¥–∞–ª–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", deletedCount);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    private String getStatusUpdateMessage(String orderNumber, OrderStatus status) {
        return switch (status) {
            case CONFIRMED ->
                    String.format("–ó–∞–∫–∞–∑ %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", orderNumber);
            case PROCESSING -> String.format("–ó–∞–∫–∞–∑ %s –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∫–∏.", orderNumber);
            case READY -> String.format("–ó–∞–∫–∞–∑ %s –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ú–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.", orderNumber);
            case COMPLETED -> String.format("–ó–∞–∫–∞–∑ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", orderNumber);
            case CANCELLED -> String.format("–ó–∞–∫–∞–∑ %s –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.", orderNumber);
            default -> String.format("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ %s –∏–∑–º–µ–Ω–µ–Ω.", orderNumber);
        };
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Notification entity –≤ NotificationResponseDTO
     */
    public NotificationResponseDTO toNotificationResponseDTO(Notification notification) {
        if (notification == null) {
            return null;
        }

        return NotificationResponseDTO.builder()
                .id(notification.getId())
                .type(notification.getType())
                .title(notification.getTitle())
                .content(notification.getContent())
                .isRead(notification.getIsRead())
                .readAt(notification.getReadAt())
                .metadata(notification.getMetadata())
                .createdAt(notification.getCreatedAt())
                .updatedAt(notification.getUpdatedAt())
                .build();
    }
}